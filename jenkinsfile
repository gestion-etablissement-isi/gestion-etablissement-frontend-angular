pipeline {
    agent any
    
    environment {
        DOCKER_USERNAME = credentials('docker-hub-username')
        APP_NAME = 'groupeisi-frontend'
        GITHUB_REPO = 'gestion-etablissement-isi/gestion-etablissement-frontend-angular'
        SONAR_HOST_URL = 'http://localhost:9000'
    }
    
    tools {
        nodejs 'NodeJS'
    }
    
    stages {
        // Récupération du code source
        stage('Récupération du Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/gestion-etablissement-isi/gestion-etablissement-frontend-angular.git'
            }
        }
        
        // Installation des dépendances
        stage('Installation des Dépendances') {
            steps {
                sh 'npm clean-install'
            }
        }
        
        // Build du projet
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }
        
        // Tests unitaires
        stage('Tests Unitaires') {
            steps {
                sh 'npm test -- --watch=false --browsers=ChromeHeadless'
            }
        }
        
        // Analyse de la qualité du code
        stage('Qualité du Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonar-credentials', passwordVariable: 'SONAR_PASSWORD', usernameVariable: 'SONAR_LOGIN')]) {
                    sh '''
                    npm install -g sonarqube-scanner
                    sonar-scanner \
                      -Dsonar.projectKey=groupeisi-frontend \
                      -Dsonar.sources=src \
                      -Dsonar.host.url=${SONAR_HOST_URL} \
                      -Dsonar.login=${SONAR_LOGIN} \
                      -Dsonar.password=${SONAR_PASSWORD}
                    '''
                }
            }
        }
        
        // Construction de l'image Docker
        stage('Construction Image Docker') {
            steps {
                script {
                    docker.build("${DOCKER_USERNAME}/${APP_NAME}:${BUILD_NUMBER}", '-f Dockerfile.angular .')
                    docker.build("${DOCKER_USERNAME}/${APP_NAME}:latest", '-f Dockerfile.angular .')
                }
            }
        }
        
        // Push de l'image vers Docker Hub
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_LOGIN')]) {
                    sh '''
                    echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_LOGIN} --password-stdin
                    docker push ${DOCKER_USERNAME}/${APP_NAME}:${BUILD_NUMBER}
                    docker push ${DOCKER_USERNAME}/${APP_NAME}:latest
                    '''
                }
            }
        }
        
        // Déploiement selon l'environnement
        stage('Déploiement') {
            parallel {
                stage('Dev - Docker') {
                    when { branch 'develop' }
                    steps {
                        sh 'docker-compose -f docker-compose.dev.yml up -d'
                    }
                }
                
                stage('Staging - Kubernetes') {
                    when { branch 'staging' }
                    steps {
                        sh 'kubectl apply -f k8s/staging/'
                    }
                }
                
                stage('Production - Cloud') {
                    when { branch 'main' }
                    steps {
                        withCredentials([
                            file(credentialsId: 'ssh-private-key', variable: 'SSH_KEY'),
                            string(credentialsId: 'cloud-server-address', variable: 'CLOUD_SERVER')
                        ]) {
                            sh '''
                            chmod 600 ${SSH_KEY}
                            scp -i ${SSH_KEY} -r docker-compose.prod.yml ubuntu@${CLOUD_SERVER}:~/
                            ssh -i ${SSH_KEY} ubuntu@${CLOUD_SERVER} "cd ~/ && docker-compose -f docker-compose.prod.yml up -d"
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Nettoyage des anciennes images Docker pour économiser de l'espace
            sh 'docker system prune -f || true'
            cleanWs()
        }
        success {
            echo 'Pipeline exécutée avec succès!'
        }
        failure {
            echo 'Échec de la pipeline!'
        }
    }
}