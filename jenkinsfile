pipeline {
    agent {
        docker {
            image 'docker:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        KUBE_CONFIG = credentials('kube-config')
        NAMESPACE = 'default'
        APP_NAME = 'gestion-etablissement-frontend'
        NODE_VERSION = '18.x'
        SONAR_PROJECT_KEY = 'gestion-etablissement-frontend'
		SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
    }
    
    stages {
        stage('Préparation') {
            steps {
                sh '''
                apk add --update nodejs npm openjdk17
                node --version
                npm --version
                java -version
                '''
            }
        }
        
        stage('Récupération du Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/gestion-etablissement-isi/gestion-etablissement-frontend-angular.git'
            }
        }
        
        stage('Installation des Dépendances') {
            steps {
                sh '''
                npm config set fetch-timeout 6000000
                npm config set fetch-retries 5
                npm ci
                '''
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }
        stage('Tests Unitaires') {
            steps {
                sh 'npm test -- --watch=false --browsers=ChromeHeadless || true'
            }
        }

        stage('Tests HMI Selenium') {
            steps {
                sh 'npx mocha tests.js || true'
            }
        }

        stage('Sonar Scanner Coverage') {
            steps {
                sh 'npm run sonar'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {

                withCredentials([string(credentialsId: 'angular-token', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://host.docker.internal:9000 \
                            -Dsonar.login=${SONAR_TOKEN} \
                        """
                    }
                }
                
            }
        }


        stage('Construction Image Docker') {
            steps {
                script {
                    sh '''
                    docker build -t julesbest176/${APP_NAME}:${BUILD_NUMBER} -f Dockerfile.angular .
                    docker tag julesbest176/${APP_NAME}:${BUILD_NUMBER} julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }
        stage('Publication Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                    echo "${DOCKER_PASSWORD}" | docker login -u julesbest176 --password-stdin
                    docker push julesbest176/${APP_NAME}:${BUILD_NUMBER}
                    docker push julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }

        

       stage('Déploiement sur Kubernetes') {
    steps {
        script {
            echo "Installation de kubectl..."
            sh '''
            if ! command -v curl &> /dev/null; then
                apt-get update && apt-get install -y curl || apk add --no-cache curl
            fi
            curl -LO "https://dl.k8s.io/release/stable.txt"
            KUBECTL_VERSION=$(cat stable.txt)
            curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mkdir -p ${WORKSPACE}/bin
            mv kubectl ${WORKSPACE}/bin/
            '''
        }

        
        
        script {
            echo "Configuration de Kubernetes..."
            withCredentials([string(credentialsId: 'kubernetes-token', variable: 'KUBE_TOKEN')]) {
                
                sh """
                    mkdir -p ~/.kube
                    
                    cat > ~/.kube/config << EOF
                    apiVersion: v1
                    clusters:
                    - cluster:
                        server: https://kubernetes.docker.internal:6443
                        insecure-skip-tls-verify: true
                    name: docker-desktop
                    contexts:
                    - context:
                        cluster: docker-desktop
                        namespace: ${NAMESPACE}
                        user: jenkins-deployer
                    name: docker-desktop
                    current-context: docker-desktop
                    kind: Config
                    preferences: {}
                    users:
                    - name: jenkins-deployer
                    user:
                        token: ${KUBE_TOKEN}
                    EOF
                    
                    chmod 600 ~/.kube/config
                """
            }
        }
        
        script {
            echo "Déploiement sur Kubernetes..."
            sh '''
            export PATH=${WORKSPACE}/bin:$PATH
            export KUBECONFIG=~/.kube/config
            
            kubectl cluster-info
            kubectl get nodes
            
            kubectl apply -f k8s/deployment.yml -n ${NAMESPACE} --validate=false
            kubectl apply -f k8s/service.yml -n ${NAMESPACE} --validate=false
            kubectl set image deployment/${APP_NAME} ${APP_NAME}=julesbest176/${APP_NAME}:${BUILD_NUMBER} -n ${NAMESPACE}
            kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}
            '''
        }
    }
}




    }    
        
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline exécutée avec succès!'
        }
        failure {
            echo 'Échec de la pipeline!'
        }
    }
}
