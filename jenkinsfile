pipeline {
    agent any
    
    environment {
        APP_NAME = 'groupeisi-frontend'
        SONAR_HOST_URL = 'http://localhost:9000'  // Remplacez par l'URL de votre serveur SonarQube
    }

    tools {
        nodejs 'NodeJS' // Nom de l'installation de Node.js configurée dans Jenkins
    }
    
    stages {
        stage('Préparation') {
            steps {
                sh 'node --version'
                sh 'npm --version'
            }
        }
        
        stage('Récupération du Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/gestion-etablissement-isi/gestion-etablissement-frontend-angular.git'
            }
        }
        
        stage('Installation des Dépendances') {
            steps {
                sh '''
                npm config set fetch-timeout 120000
                npm config set fetch-retries 5
                npm ci
                '''
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }
        
        stage('Tests Unitaires') {
            steps {
                sh 'npm test -- --watch=false --browsers=ChromeHeadless || true'
            }
        }

        // Ajout de l'étape SonarQube
        stage('Analyse SonarQube') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonar-credentials', passwordVariable: 'SONAR_PASSWORD', usernameVariable: 'SONAR_LOGIN')]) {
                    sh '''
                    npm install -g sonarqube-scanner
                    sonar-scanner \
                      -Dsonar.projectKey=groupeisi-frontend \
                      -Dsonar.sources=src \
                      -Dsonar.host.url=${SONAR_HOST_URL} \
                      -Dsonar.login=${SONAR_LOGIN} \
                      -Dsonar.password=${SONAR_PASSWORD}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline exécutée avec succès!'
        }
        failure {
            echo 'Échec de la pipeline!'
        }
    }
}
