pipeline {
    agent any
    
    environment {
        APP_NAME = 'groupeisi-frontend'
    }

    tools {
        nodejs 'NodeJS' // Nom de l'installation de Node.js configurée dans Jenkins
    }
    
    stages {
        stage('Préparation') {
            steps {
                sh 'node --version'
                sh 'npm --version'
            }
        }
        
        stage('Récupération du Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/gestion-etablissement-isi/gestion-etablissement-frontend-angular.git'
            }
        }
        
        stage('Installation des Dépendances') {
            steps {
                sh '''
                npm config set fetch-timeout 120000
                npm config set fetch-retries 5
                npm ci
                '''
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }

        stage('Tests Unitaires') {
            steps {
                sh 'npm test -- --watch=false --browsers=ChromeHeadless || true'
            }
        }

         stage('Construction Image Docker') {
            steps {
                script {
                    sh '''
                    docker build -t julesbest176/${APP_NAME}:${BUILD_NUMBER} -f Dockerfile.angular .
                    docker tag julesbest176/${APP_NAME}:${BUILD_NUMBER} julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }

        stage('Publication Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                    echo ${DOCKER_PASSWORD} | docker login -u julesbest176 --password-stdin
                    docker push julesbest176/${APP_NAME}:${BUILD_NUMBER}
                    docker push julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }

        stage('Déploiement Dev (Docker)') {
            when {
                branch 'develop'
            }
            steps {
                sh '''
                # Créer ou mettre à jour le fichier docker-compose.dev.yml
                cat > docker-compose.dev.yml << 'EOL'
                version: '3.8'

                services:
                angular-app:
                    image: julesbest176/groupeisi-frontend:latest
                    container_name: angular-app-dev
                    ports:
                    - "4200:80"
                    networks:
                    - groupeisi-network

                networks:
                groupeisi-network:
                    driver: bridge
                EOL

                # Déployer avec docker-compose
                docker-compose -f docker-compose.dev.yml up -d --force-recreate
                '''
            }
        }
    }

    stage('Déploiement Staging (Kubernetes)') {
    when {
        branch 'staging'
    }
    steps {
        withKubeConfig([credentialsId: 'kubeconfig']) {
            sh '''
            # Créer les fichiers de configuration Kubernetes
            mkdir -p k8s/staging
            
            # Namespace
            cat > k8s/staging/namespace.yml << 'EOL'
            apiVersion: v1
            kind: Namespace
            metadata:
            name: groupeisi-staging
            EOL
                        
            # Deployment
            cat > k8s/staging/deployment.yml << 'EOL'
            apiVersion: apps/v1
            kind: Deployment
            metadata:
            name: angular-frontend
            namespace: groupeisi-staging
            spec:
            replicas: 2
            selector:
                matchLabels:
                app: angular-frontend
            template:
                metadata:
                labels:
                    app: angular-frontend
                spec:
                containers:
                - name: angular-frontend
                    image: julesbet176/groupeisi-frontend:latest
                    ports:
                    - containerPort: 80
            EOL
                        
            # Service
            cat > k8s/staging/service.yml << 'EOL'
            apiVersion: v1
            kind: Service
            metadata:
            name: angular-frontend
            namespace: groupeisi-staging
            spec:
            selector:
                app: angular-frontend
            ports:
            - port: 80
                targetPort: 80
            type: ClusterIP
            EOL
                        
            # Ingress
            cat > k8s/staging/ingress.yml << 'EOL'
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
            name: angular-frontend
            namespace: groupeisi-staging
            annotations:
                nginx.ingress.kubernetes.io/rewrite-target: /
            spec:
            ingressClassName: nginx
            rules:
            - host: staging.groupeisi.local
                http:
                paths:
                - path: /
                    pathType: Prefix
                    backend:
                    service:
                        name: angular-frontend
                        port:
                        number: 80
            EOL
                        
            # Appliquer les configurations
            kubectl apply -f k8s/staging/namespace.yml
            kubectl apply -f k8s/staging/deployment.yml
            kubectl apply -f k8s/staging/service.yml
            kubectl apply -f k8s/staging/ingress.yml
                        
            # Vérifier le déploiement
            kubectl rollout status deployment/angular-frontend -n groupeisi-staging
            '''
        }
    }
}
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline exécutée avec succès!'
        }
        failure {
            echo 'Échec de la pipeline!'
        }
    }
}
