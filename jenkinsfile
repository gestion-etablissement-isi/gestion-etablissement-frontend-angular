pipeline {
    agent {
        docker {
            image 'docker:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        APP_NAME = 'groupeisi-frontend'
        NODE_VERSION = '18.x'
    }
    
    stages {
        stage('Préparation') {
            steps {
                sh '''
                apk add --update nodejs npm
                node --version
                npm --version
                '''
            }
        }
        
        stage('Récupération du Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/gestion-etablissement-isi/gestion-etablissement-frontend-angular.git'
            }
        }
        
        stage('Installation des Dépendances') {
            steps {
                sh '''
                npm config set fetch-timeout 120000
                npm config set fetch-retries 5
                npm ci
                '''
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }
        stage('Tests Unitaires') {
            steps {
                sh 'npm test -- --watch=false --browsers=ChromeHeadless || true'
            }
        }

        stage('Sonar Scanner Coverage') {
            steps {
                sh 'npm run sonar'
            }
        }
        
        // stage('SonarQube Analysis') {
        //     steps {
        //         // Installation manuelle de sonar-scanner
        //         sh '''
        //         apk add --update curl unzip openjdk11
                
        //         # Télécharger et installer SonarScanner
        //         mkdir -p /opt/sonar-scanner
        //         curl -sSLo /tmp/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        //         unzip -o /tmp/sonar-scanner.zip -d /opt/
        //         mv /opt/sonar-scanner-* /opt/sonar-scanner-cli
        //         ln -sf /opt/sonar-scanner-cli/bin/sonar-scanner /usr/local/bin/sonar-scanner
        //         rm /tmp/sonar-scanner.zip
        //         '''
                
        //         withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
        //             sh '''
        //             sonar-scanner \\
        //                 -Dsonar.projectKey=groupeisi-frontend \\
        //                 -Dsonar.sources=src \\
        //                 -Dsonar.host.url=http://localhost:9000 \\
        //                 -Dsonar.login=$SONAR_TOKEN
        //             '''
        //         }
        //     }
        // }


        stage('Construction Image Docker') {
            steps {
                script {
                    sh '''
                    docker build -t julesbest176/${APP_NAME}:${BUILD_NUMBER} -f Dockerfile.angular .
                    docker tag julesbest176/${APP_NAME}:${BUILD_NUMBER} julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }
        stage('Publication Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                    echo "${DOCKER_PASSWORD}" | docker login -u julesbest176 --password-stdin
                    docker push julesbest176/${APP_NAME}:${BUILD_NUMBER}
                    docker push julesbest176/${APP_NAME}:latest
                    '''
                }
            }
        }
    }    
        
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline exécutée avec succès!'
        }
        failure {
            echo 'Échec de la pipeline!'
        }
    }
}
